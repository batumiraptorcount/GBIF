workdir<-"/Users/jasper 1/Documents/Rplayground/data analysis - Bitbucket/data/in"#
outputdir<-"data/out"#
setwd(workdir)
full_data<-read.csv("2017_Trektellen_RAW.csv", header=T, fileEncoding="UTF-8", sep="\t")
#! trektellen files are written in UTF-7#
full_data<-data.frame(full_data)#
######################## Converter START #########################
colnames(full_data)[colnames(full_data) == "migtype"]<-"health"#
colnames(full_data)[colnames(full_data) == "plumage"]<-"morph"#
colnames(full_data)[colnames(full_data) == "timestamp"]<-"time"#
colnames(full_data)[colnames(full_data) == "telpost"]<-"station"#
colnames(full_data)[colnames(full_data) == "speciesname"]<-"species"#
colnames(full_data)[colnames(full_data) == "soortkey"]<-"species"#
colnames(full_data)[colnames(full_data) == "count"]<-"number"#
colnames(full_data)[colnames(full_data) == "countback"]<-"countsouth" # error!!!#
colnames(full_data)[colnames(full_data) == "counttype"]<-"counttype"#
colnames(full_data)[colnames(full_data) == "speciesid"]<-"speciesid"#
#
full_data$species<-as.character(full_data$species)#
full_data$age<-as.character(full_data$age)#
full_data$morph<-as.character(full_data$morph)#
full_data$health<-as.character(full_data$health)#
full_data$counttype<-as.character(full_data$counttype)#
full_data$sex<-as.character(full_data$sex)#
#
#### set abbreviations straight #####
full_data$age[full_data$age == "A"]<-"ad"#
full_data$age[full_data$age == "I"]<-"imm"#
full_data$age[full_data$age == "J"]<-"juv"#
full_data$age[full_data$age == "Non-Juv"]<-"nonjuv"#
full_data$age[full_data$age == "non-juv"]<-"nonjuv"#
full_data$morph[full_data$morph == "D"]<-"dark"#
full_data$morph[full_data$morph == "L"]<-"light"#
full_data$health[full_data$health == "I"]<-"inj"#
full_data$health[full_data$health == "K"]<-"kil"#
full_data$sex[full_data$sex == "FC"]<-"fc"#
full_data$sex[full_data$sex == "M"]<-"m"#
full_data$sex[full_data$sex == "F"]<-"f"#
full_data$counttype[full_data$counttype == "S"]<-"SC"#
full_data$counttype[full_data$counttype == "D"]<-"DC"#
full_data$species[full_data$species == "Accspec"]<-"SparrowH/Goshawk"#
full_data$species[full_data$species == "BK"]<-"BlackKite" #
full_data$species[full_data$species == "BlaKite"]<-"BlackKite"#
full_data$species[full_data$species == "BK_JUV"]<-"BlackKite_JUV"#
full_data$species[full_data$species == "BK_NONJUV"]<-"BlackKite_NONJUV"#
full_data$species[full_data$species == "Bk_juv"]<-"BlackKite_JUV"#
full_data$species[full_data$species == "Bk_imm"]<-"BlackKite_NONJUV"#
full_data$species[full_data$species == "Bk_ad"]<-"BlackKite_NONJUV"#
full_data$species[full_data$species == "BKjuv"]<-"BlackKite_JUV"#
full_data$species[full_data$species == "BKimm"]<-"BlackKite_NONJUV"#
full_data$species[full_data$species == "BKad"]<-"BlackKite_NONJUV"#
full_data$species[full_data$species == "BK_Ad"]<-"BlackKite_NONJUV"#
full_data$species[full_data$species == "BK_Non-juv"]<-"BlackKite_NONJUV"#
full_data$species[full_data$species == "BK_Juv"]<-"BlackKite_JUV"#
full_data$species[full_data$species == "BE"]<-"BootedE"#
full_data$species[full_data$species == "BEL"]<-"BootedEL" #
full_data$species[full_data$species == "BED"]<-"BootedED" #
full_data$species[full_data$species == "Buzspec"]<-"Buzzard"#
full_data$species[full_data$species == "Buzzard sp"]<-"Buzzard"#
full_data$species[full_data$species == "Buz/HonBuz"]<-"Buzzard"#
full_data$species[full_data$species == "Buz"]<-"Buzzard"#
full_data$species[full_data$species == "BUZ"]<-"Buzzard"#
full_data$species[full_data$species == "B"]<-"Buzzard"#
full_data$species[full_data$species == "BlaStork"]<-"BlackStork"#
full_data$species[full_data$species == "BS"]<-"BlackStork"#
full_data$species[full_data$species == "BS/WS"]<-"Stork"#
full_data$species[full_data$species == "BlackVulture"]<-"BlackV" #
full_data$species[full_data$species == "BV"]<-"BlackV"#
full_data$species[full_data$species == "CommonB"]<-"CommonBuz"#
full_data$species[full_data$species == "CB"]<-"CommonBuz" #
full_data$species[full_data$species == "Crane"]<-"CommonCrane" #
full_data$species[full_data$species == "CC"]<-"CommonCrane"#
full_data$species[full_data$species == "CommonC"]<-"CommonCrane"#
full_data$species[full_data$species == "ComCrane"]<-"CommonCrane"#
full_data$species[full_data$species == "CommonK"]<-"CommonKestrel"#
full_data$species[full_data$species == "CommonKes"]<-"CommonKestrel"#
full_data$species[full_data$species == "CK"]<-"CommonKestrel"#
full_data$species[full_data$species == "CLK"]<-"Kestrel-SPEC"#
full_data$species[full_data$species == "Crested HB"]<-"CrestedHB"#
full_data$species[full_data$species == "CHB"]<-"CrestedHB"#
full_data$species[full_data$species == "Demoisellecrane"]<-"DemoiselleCrane"#
full_data$species[full_data$species == "Demoiselle crane"]<-"DemoiselleCrane"#
full_data$species[full_data$species == "DalmatianP"]<-"DalmatianPelican"#
full_data$species[full_data$species == "EgytianV"]<-"EgyptianV"#
full_data$species[full_data$species == "Egy"]<-"EgyptianV"#
full_data$species[full_data$species == "SparrowH"]<-"EurasianSH"#
full_data$species[full_data$species == "ESH"]<-"EurasianSH"#
full_data$species[full_data$species == "ESPH"]<-"EurasianSH"#
full_data$species[full_data$species == "Fal"]<-"Falcon-SPEC"#
full_data$species[full_data$species == "GSE"]<-"GreaterSE"#
full_data$species[full_data$species == "GE"]<-"GoldenE"#
full_data$species[full_data$species == "Gh"]<-"Goshawk"#
full_data$species[full_data$species == "GH"]<-"Goshawk"#
full_data$species[full_data$species == "Griffon"]<-"GriffonV" #
full_data$species[full_data$species == "Griffon V"]<-"GriffonV" #
full_data$species[full_data$species == "GV"]<-"GriffonV" #
full_data$species[full_data$species == "Har"]<-"Harrier-SPEC"#
full_data$species[full_data$species == "harrier sp"]<-"Harrier-SPEC"#
full_data$species[full_data$species == "Harspec"]<-"Harrier-SPEC"#
full_data$species[full_data$species == "Circus-SPEC"]<-"Harrier-SPEC"#
full_data$species[full_data$species == "Hen H"]<-"Hen"#
full_data$species[full_data$species == "HOb"]<-"Hobby"#
full_data$species[full_data$species == "HOB"]<-"Hobby"#
full_data$species[full_data$species == "Hob"]<-"Hobby"#
full_data$species[full_data$species == "Hob/RFF"]<-"Hobby/RedFF"#
full_data$species[full_data$species == "HobRFF"]<-"Hobby/RedFF"#
full_data$species[full_data$species == "HB "]<-"HB"#
full_data$species[full_data$species == "HBjuv"]<-"HB_JUV"#
full_data$species[full_data$species == "HBad"]<-"HB_AD"#
full_data$species[full_data$species == "HB_juv"]<-"HB_JUV"#
full_data$species[full_data$species == "HB_ad"]<-"HB_AD"#
full_data$species[full_data$species == "HB_Juv"]<-"HB_JUV"#
full_data$species[full_data$species == "HB_Ad"]<-"HB_AD"#
full_data$species[full_data$species == "Imp"]<-"ImperialE"#
full_data$species[full_data$species == "ImpE"]<-"ImperialE"#
full_data$species[full_data$species == "Imp E"]<-"ImperialE"#
full_data$species[full_data$species == "LUID"]<-"LargeEAGLE"#
full_data$species[full_data$species == "LAquila-SPEC"]<-"LargeEAGLE"#
full_data$species[full_data$species == "Large EAGLE"]<-"LargeEAGLE"#
full_data$species[full_data$species == "LEspec"]<-"LargeEAGLE"#
full_data$species[full_data$species == "LesGreste"]<-"LargeEAGLE"#
full_data$species[full_data$species == "LesGrSte"]<-"LargeEAGLE"#
full_data$species[full_data$species == "LesGrestep"]<-"LargeEAGLE"#
full_data$species[full_data$species == "LesGresteppe"]<-"LargeEAGLE"#
full_data$species[full_data$species == "Large Eagle"]<-"LargeEAGLE"#
full_data$species[full_data$species == "large FALCON"]<-"LargeFALCON"#
full_data$species[full_data$species == "LargeFalcon"]<-"LargeFALCON"#
full_data$species[full_data$species == "LFspec"]<-"LargeFALCON"#
full_data$species[full_data$species == "Fspec"]<-"LargeFALCON"#
full_data$species[full_data$species == "Lkes"]<-"LesserKestrel"#
full_data$species[full_data$species == "LKes"]<-"LesserKestrel"#
full_data$species[full_data$species == "Kestrel"]<-"CommonKestrel"#
full_data$species[full_data$species == "Kes"]<-"CommonKestrel"#
full_data$species[full_data$species == "Kest/LesKest"]<-"Kestrel-SPEC"#
full_data$species[full_data$species == "Kesspec"]<-"Kestrel-SPEC"#
full_data$species[full_data$species == "LK"]<-"LesserKestrel"#
full_data$species[full_data$species == "LesserKes"]<-"LesserKestrel"#
full_data$species[full_data$species == "LesKes"]<-"LesserKestrel"#
full_data$species[full_data$species == "LSE"]<-"LesserSE"#
full_data$species[full_data$species == "LSH"]<-"LevantSH"#
full_data$species[full_data$species == "LSPH"]<-"LevantSH"#
full_data$species[full_data$species == "LevantS"]<-"LevantSH"#
full_data$species[full_data$species == "LLB"]<-"LongLB"#
full_data$species[full_data$species == "Long-legged buzzard"]<-"LongLB"#
full_data$species[full_data$species == "MAR"]<-"Mar"#
full_data$species[full_data$species == "Mer"]<-"Merlin"#
full_data$species[full_data$species == "MUID"]<-"MediumRaptor"#
full_data$species[full_data$species == "Monpal"]<-"MonPalHen"#
full_data$species[full_data$species == "MonPal"]<-"MonPalHen"#
full_data$species[full_data$species == "MonpalHen"]<-"MonPalHen"#
full_data$species[full_data$species == "OSP"]<-"Osprey"#
full_data$species[full_data$species == "Osp"]<-"Osprey" #
full_data$species[full_data$species == "Per"]<-"Peregrine" #
full_data$species[full_data$species == "Peregrine/Saker"]<-"LargeFALCON"#
full_data$species[full_data$species == "PerSak"]<-"LargeFALCON"#
full_data$species[full_data$species == "PerSakLan"]<-"LargeFALCON"#
full_data$species[full_data$species == "RFF"]<-"RedFF"#
full_data$species[full_data$species == "RK"]<-"RedKite"#
full_data$species[full_data$species == "Rol"]<-"Roller"#
full_data$species[full_data$species == "RLB"]<-"RoughLB"#
full_data$species[full_data$species == "SakerF"]<-"Saker" #
full_data$species[full_data$species == "Sak"]<-"Saker" #
full_data$species[full_data$species == "SB"]<-"StepBuz"#
full_data$species[full_data$species == "SteppeB"]<-"StepBuz"#
full_data$species[full_data$species == "SBHB"]<-"Buzzard"#
full_data$species[full_data$species == "SH"]<-"SparrowH-SPEC"#
full_data$species[full_data$species == "LevantS/Sparrow"]<-"SparrowH-SPEC"#
full_data$species[full_data$species == "Shspec"]<-"SparrowH-SPEC"#
full_data$species[full_data$species == "SPH"]<-"SparrowH-SPEC"#
full_data$species[full_data$species == "SPH/GH"]<-"SparrowH/Goshawk"#
full_data$species[full_data$species == "SPGH"]<-"SparrowH/Goshawk"#
full_data$species[full_data$species == "STE"]<-"ShortTE"#
full_data$species[full_data$species == "SHTE"]<-"ShortTE"#
full_data$species[full_data$species == "Seowl"]<-"ShortEaredOwl" #
full_data$species[full_data$species == "SEowl"]<-"ShortEaredOwl" #
full_data$species[full_data$species == "Short-earedOwl"]<-"ShortEaredOwl"#
full_data$species[full_data$species == "ShortEO"]<-"ShortEaredOwl" #
full_data$species[full_data$species == "SEO"]<-"ShortEaredOwl"#
full_data$species[full_data$species == "STEP"]<-"SteppeE"#
full_data$species[full_data$species == "SUID"]<-"MediumRaptor" # only very little numbers#
full_data$species[full_data$species == "TurtleDove"]<-"TurtleD"#
full_data$species[full_data$species == "UID"]<-"MediumRaptor" # only very little numbers#
full_data$species[full_data$species == "WTE"]<-"WhiteTE" #
full_data$species[full_data$species == "Wh-TailE"]<-"WhiteTE" #
full_data$species[full_data$species == "White-tailedE"]<-"WhiteTE" #
full_data$species[full_data$species == "White-TE"]<-"WhiteTE" #
full_data$species[full_data$species == "Wh-Tail E"]<-"WhiteTE"#
full_data$species[full_data$species == "WhiStork"]<-"WhiteStork"#
full_data$species[full_data$species == "WS"]<-"WhiteStork"#
full_data$species[full_data$species == "WhitStork"]<-"WhiteStork"#
full_data$species[full_data$species == "Storks-SPEC"]<-"Stork-SPEC"#
full_data$species[full_data$species == "WBST"]<-"Stork-SPEC"#
full_data$species[full_data$species == "WP"]<-"WhitePelican"#
full_data$species[full_data$species == "WhiteP"]<-"WhitePelican"#
full_data$species[full_data$species == "Start"]<-"start"#
full_data$species[full_data$species == "Start "]<-"start"#
full_data$species[full_data$species == "START"]<-"start"#
full_data$species[full_data$species == "SHIFT"]<-"shift"#
full_data$species[full_data$species == "Shift"]<-"shift"#
full_data$species[full_data$species == "END"]<-"end"#
full_data$species[full_data$species == "End"]<-"end"#
full_data$species[full_data$species == "shot"]<-"SHOT"#
full_data$species[full_data$species == "Shot"]<-"SHOT"#
full_data$species[full_data$species == "STOP"]<-"end"#
full_data$species[full_data$species == "Stop"]<-"end"#
full_data$species[full_data$species == "Rain"]<-"rain"#
full_data$species[full_data$species == "Comment"]<-"comment"#
full_data$species[full_data$species == "Nis"]<-"NIS"#
full_data$species[full_data$species == "nis"]<-"NIS"#
full_data$species[full_data$species == "Meteo"]<-"meteo"#
full_data$age<-tolower(full_data$age)#
full_data$age[full_data$age == "adult"]<-"ad"#
full_data$age[full_data$age == "Non-Juv"]<-"nonjuv"#
full_data$age[full_data$age == "I"]<-"imm"#
full_data$age[full_data$age == "A"]<-"ad"#
full_data$age[full_data$age == "J"]<-"juv"#
full_data$age[full_data$age == "no value"]<-""#
full_data$age[full_data$age == "m"]<-""#
full_data$age[full_data$age == "fc"]<-""#
full_data$age[full_data$age == "f"]<-""#
full_data$age[full_data$age == "2cy"]<-"imm"#
full_data$age[full_data$age == "2 cy"]<-"imm"#
full_data$age[full_data$age == "3cy"]<-"imm"#
full_data$age[full_data$age == "3 cy"]<-"imm"#
full_data$age[full_data$age == "4cy"]<-"imm"#
full_data$age[full_data$age == "4 cy"]<-"imm"#
full_data$sex<-tolower(full_data$sex)#
full_data$sex[full_data$sex == "no value"]<-""#
full_data$sex[full_data$sex == "novalue"]<-""#
full_data$sex[full_data$sex == "novalue"]<-""#
full_data$sex[full_data$sex == "F"]<-"f"#
full_data$sex[full_data$sex == "FC"]<-"fc"#
full_data$sex[full_data$sex == "M"]<-"m"#
full_data[full_data == "No Value"]<-""#
full_data$number[full_data$number == "No Value"]<-0#
full_data$number[full_data$number == "NoValue"]<-0#
full_data$number[full_data$number == "no value"]<-0#
full_data$number[full_data$number == ""]<-0#
full_data[full_data =="NoValue"]<-""#
full_data<- data.frame(lapply(full_data, function(x) {gsub(";", " ", x)}))#
full_data<- data.frame(lapply(full_data, function(x) {gsub(",", " ", x)}))#
full_data<- data.frame(lapply(full_data, function(x) {gsub("'", "", x)}))#
full_data$countid<-NULL#
######################## Converter END #########################
#
## write data#
setwd(outputdir)#
write.csv(full_data, "converter_output.csv", fileEncoding ="UTF-8")
outputdir<-"/Users/jasper 1/Documents/Rplayground/data analysis - Bitbucket/data/in"
setwd(outputdir)#
write.csv(full_data, "converter_output.csv", fileEncoding ="UTF-8")
################################################################
################### BATUMI RAPTOR COUNT ########################
######### Script sets for compiling count data #################
############### Detect double counts ###########################
####### authors: J. Wehrmann, B. Verhelst ######################
#
############################ Instructions #################################
# runs only under BRC formatted data#
# see BRC-oldDataConverter.R for details#
#
# todo's: #
# order tablespecs by taxonomy ID, #
# adjust abbreviations#
# adjust headertitles#
# remove German - change to English#
# add DCDEL IDs to DCDELREMARKS#
# increase speed by removing loops with functions, framing#
rm(list=ls())#
#### libraries  #####
library(lubridate)#
library(rpanel)#
library(tcltk2)#
library(data.table)#
#
### directories ######
# modify the path#
workdir<-"/Users/jasper 1/Documents/Rplayground/data analysis - Bitbucket/data/in"#
outputdir<-"/Users/jasper 1/Documents/Rplayground/data analysis - Bitbucket/data/out"#
setwd(workdir)#
### load data ######
dc_specs<-read.csv("dc_specs.csv", header=TRUE, encoding="UTF-8")#
dc_specs_nonsoaring<-read.csv("dc_specs_nonsoaring.csv", header=TRUE, encoding="UTF-8")#
data<-read.csv("1-converter_output_2017.csv", header=TRUE, encoding="UTF-8")#
#
# Detect HB phase1 in order to not run the double count check as HB phase 1 counts only from station 1. #
HBPhase1Start<-c("2010-08-21 00:00:01 CEST", "2011-08-21 00:00:01 CEST", "2012-08-21 00:00:01 CEST", "2013-08-21 00:00:01 CEST", "2014-08-21 00:00:01 CEST", "2015-08-21 00:00:01 CEST", "2016-08-21 00:00:01 CEST", "2017-08-21 00:00:01 CEST", "2018-08-21 00:00:01 CEST", "2019-08-21 00:00:01 CEST", "2020-08-21 00:00:01 CEST")#
HBPhase1End <-c("2010-09-10 00:00:01 CEST", "2011-09-10 00:00:01 CEST", "2012-09-10 00:00:01 CEST", "2013-09-10 00:00:01 CEST", "2014-09-10 00:00:01 CEST", "2015-09-10 00:00:01 CEST", "2016-09-10 00:00:01 CEST", "2017-09-10 00:00:01 CEST", "2018-09-10 00:00:01 CEST", "2019-09-10 00:00:01 CEST", "2020-09-10 00:00:01 CEST")#
#
#### for running several years uncomment these lines and the line 207 and very last line 349#
for (y in 2008:2016){#
setwd(workdir)	#
# modify the file name, make sure the csv is encoded in UTF-8!!#
data<-read.csv(paste0("1-converter_output_",y,".csv"), header=TRUE, encoding="UTF-8")#
#
# pre-format data#
data$dcdel<-0#
data$dckept <-0#
data$dcdelremark<-""#
data$speciesname<-as.character(data$speciesname)#
data$count<-as.numeric(data$count)#
data$count[which(is.na(data$count) == T)]<-1#
data$count[which(data$count == "")]<-1#
data$datetime<-paste(data$date, data$timestamp, sep = " ")#
data$datetime<-as.POSIXct(data$datetime, format="%Y-%m-%d %H:%M:%S")#
data<-data[order(data$datetime),]#
data$id<-seq.int(nrow(data))#
data[is.na(data)]<-""#
#
# subset for testing#
#data<-data[5000:10000,]#
#subsets#
station1<-as.data.table(subset(data, telpost==1))#
station2<-as.data.table(subset(data, telpost==2))#
#
# create vectors for each col and station#
datetime1<-station1$datetime#
datetime2<-station2$datetime#
count1<-as.numeric(station1$count)#
count2<-as.numeric(station2$count)#
count1_o<-as.numeric(station1$count)#
count2_o<-as.numeric(station2$count)#
countback1<-as.numeric(station1$countback)#
countback2<-as.numeric(station2$countback)#
countback1[is.na(countback1)]<-0#
countback2[is.na(countback2)]<-0#
speciesname1<-station1$speciesname#
speciesname2<-station2$speciesname#
location1<-as.vector(station1$location)#
location2<-as.vector(station2$location)#
age1<-as.vector(station1$age)#
age2<-as.vector(station2$age)#
sex1<-as.vector(station1$sex)#
sex2<-as.vector(station2$sex)#
plumage1<-as.vector(station1$plumage)#
plumage2<-as.vector(station2$plumage)#
counttype1<-as.vector(station1$counttype)#
counttype2<-as.vector(station2$counttype)#
migtype1<-as.vector(station1$migtype)#
migtype2<-as.vector(station2$migtype)#
remark1<-station1$remark#
remark2<-station2$remark#
dcdel1<-as.numeric(station1$dcdel)#
dcdel2<-as.numeric(station2$dcdel)#
dckept1<-as.numeric(station1$dckept)#
dckept2<-as.numeric(station2$dckept)#
dcdelremark1<-as.vector(station1$dcdelremark)#
dcdelremark2<-as.vector(station2$dcdelremark)#
id1<-as.vector(station1$id)#
id2<-as.vector(station2$id)#
count1_length<-length(id1)#
dc_number_total<-0#
dc_hits<-0#
#
# for progress bar to show calculation progress while running the script#
totalnumber<-sum(count1) + sum(count2)#
pb <- tkProgressBar(title = "Progress Bar", min = 0, max = length(station1$count), width = 600)#
systemtime<-Sys.time() #
currentduration<-0#
###frame subset for station 1#
yearframe<-which(unique(station1$year) == year(HBPhase1Start))#
HBphase1frame1<-which(speciesname1 == "HB" & datetime1 > HBPhase1Start[yearframe] & datetime1 < HBPhase1End[yearframe])#
# frame age classes, for station2 redundant because of dc_specs#
HB_BK_age_frame<-! which(speciesname1 == "HB_AD" | speciesname1 == "HB_JUV" | speciesname1 == "BK_AD" | speciesname1 == "BK_NONJUV")#
#frame for HB phase 1 marks records as single count#
counttype1[HBphase1frame1]<-"sc"#
#frame for single counts#
counttypeframe1<-which(counttype1 != "sc")#
#frame for dc_specs#
dc_specsframe1<- which(speciesname1[counttypeframe1] %in% colnames(dc_specs))#
# frames observation by zone != W3 on station 1#
#zoneframe1<-which(location1[counttypeframe1][dc_specsframe1] != "W3")#
#
# set & attach individual species speed#
soaring_speed<-900 # 900 sec are 15 min#
non_soaring_speed<-600 # 600 sec are 10 min#
allspecies<-data.frame(species=unique(data$speciesname), seconds=soaring_speed)#
allspecies[which(allspecies$species %in% dc_specs_nonsoaring[,]),]$seconds<-non_soaring_speed#
#
### function to compare details of entries#
compare.it <- function(species1,species2,loc1,loc2,s1,s2,a1,a2,p1,p2,n1,n2) {#
#for testing#
		# species1<-speciesname1[counttypeframe1][dc_specsframe1][i]#
		# species2<-speciesname2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p]#
		# loc1<-location1[counttypeframe1][dc_specsframe1][i]#
		# loc2<-location2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p]#
		# s1<-sex1[counttypeframe1][dc_specsframe1][i]#
		# s2<-sex2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p]#
		# a1<-age1[counttypeframe1][dc_specsframe1][i]#
		# a2<-age2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p]#
		# p1<-plumage1[counttypeframe1][dc_specsframe1][i]#
		# p2<-plumage2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p]#
		# n1<-count1[counttypeframe1][dc_specsframe1][i]#
		# n2<-count2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] #
    if ((n1 != 0 | n2 != 0) & ( #numbers must not be 0#
	    (loc1 == "E3" & (loc2 == "W2" | loc2 == "W1" | loc2 == "" | (speed == soaring_speed & (loc2 == "O" | loc2 == "E1" | loc2 == "E2")))) |#
    		(loc1 == "E2" & (loc2 == "W2" | loc2 == "W3" | loc2 == "")) | #
    		(loc2 == "W3" & (loc1 == "E2" | loc1 == "E1" | loc1 == "" | (speed == soaring_speed & (loc1 == "O" | loc1 == "W1" | loc1 == "W2"))))#
    		)) {	#zones overlap, continue with comparing other details#
	#_mprecise means more precise, _equal means both are same#
	specs2<-dc_specs[colnames(dc_specs) == species2]#
	if(species1 == species2){ #nlevels(specs1[,]) == nlevels(specs2[,])#
		spec1_mprecise<-FALSE; spec2_mprecise<-FALSE; spec_equal<-TRUE}  else if(nlevels(specs1[,]) < nlevels(specs2[,])){ #species1 > species2#
		spec1_mprecise<-TRUE;  spec2_mprecise<-FALSE; spec_equal<-FALSE} else if(nlevels(specs1[,]) >  nlevels(specs2[,])){#
		spec1_mprecise<-FALSE; spec2_mprecise<-TRUE;  spec_equal<-FALSE}#
 	if(((a1 == "ad" | a1 == "imm") & a2 =="nonjuv") | (a1 !=  ""   & a2 == "")){ #age1 > age2#
    		age1_mprecise<-TRUE;  age2_mprecise<-FALSE; age_equal<-FALSE } else if (((a2 == "ad" | a2 == "imm") & a1 =="nonjuv") | 	(a2 != ""   & a1 == "")){ #age1 < age2#
	   	age1_mprecise<-FALSE; age2_mprecise<-TRUE;  age_equal<-FALSE } else if (a1 == a2){#
    		age1_mprecise<-FALSE; age2_mprecise<-FALSE; age_equal<-TRUE	 } else {#
    		age1_mprecise<-FALSE; age2_mprecise<-FALSE; age_equal<-FALSE }#
#
	if(	(s1 != "" & s2 =="") |  	(s1 == "f"  & s2 == "fc")){ #sex1 > sex2#
    		sex1_mprecise<-TRUE;  sex2_mprecise<-FALSE; sex_equal<-FALSE; sex_different<-FALSE } else if ((s2 != "" & s1 =="") | (s2 == "f"  & s1 == "fc")){ #sex1 < sex2 #
    		sex1_mprecise<-FALSE; sex2_mprecise<-TRUE;  sex_equal<-FALSE; sex_different<-FALSE } else if (s1 == s2){#
    		sex1_mprecise<-FALSE; sex2_mprecise<-FALSE; sex_equal<-TRUE; sex_different<-FALSE  } else if (s1 != s2 & s1!="" & s2 != ""){#
    		sex1_mprecise<-FALSE; sex2_mprecise<-FALSE; sex_equal<-FALSE; sex_different<-TRUE   } else {#
    		sex1_mprecise<-FALSE; sex2_mprecise<-FALSE; sex_equal<-FALSE; sex_different<-FALSE }#
    if( (p1 != "" & p2 =="")){ #plumage1 > plumage2#
    	 	plumage1_mprecise<-TRUE;  plumage2_mprecise<-FALSE; plumage_equal<-FALSE; plumage_different<-FALSE } else if ((p2 != "" & p1 =="")){ #plumage1 < plumage2#
		plumage1_mprecise<-FALSE; plumage2_mprecise<-TRUE;  plumage_equal<-FALSE; plumage_different<-FALSE } else if (p1 == p2){#
    		plumage1_mprecise<-FALSE; plumage2_mprecise<-FALSE; plumage_equal<-TRUE;  plumage_different<-FALSE } else if (p1 != p2 & p1!="" & p2 != ""){#
    	plumage1_mprecise<-FALSE; plumage2_mprecise<-FALSE; plumage_equal<-FALSE; plumage_different<-TRUE  } else {#
 		plumage1_mprecise<-FALSE; plumage2_mprecise<-FALSE; plumage_equal<-FALSE; plumage_different<-FALSE }#
	if (#keep 1#
		((spec_equal == TRUE | spec1_mprecise == TRUE) & (age1_mprecise == TRUE & (sex1_mprecise == TRUE | sex_equal == TRUE)) & (plumage1_mprecise == TRUE | plumage_equal == TRUE))  | #
		((spec_equal == TRUE | spec1_mprecise == TRUE) & age_equal == TRUE & sex1_mprecise == TRUE & (plumage1_mprecise == TRUE | plumage_equal == TRUE))  | #
		((spec_equal == TRUE | spec1_mprecise == TRUE) & age_equal == TRUE & sex_equal == TRUE & plumage1_mprecise == TRUE)  |#
		((spec_equal == TRUE | spec1_mprecise == TRUE) & age_equal == TRUE & sex_equal == TRUE & plumage_equal == TRUE & loc1!= "E3") #
		){keep<-1#
		} else if ( #keep 2#
		((spec_equal == TRUE | spec2_mprecise == TRUE) & (age2_mprecise == TRUE & (sex2_mprecise == TRUE | sex_equal == TRUE)) & (plumage2_mprecise == TRUE | plumage_equal == TRUE))  | #
		((spec_equal == TRUE | spec2_mprecise == TRUE) & age_equal == TRUE & sex2_mprecise == TRUE & (plumage2_mprecise == TRUE | plumage_equal == TRUE))  | #
		((spec_equal == TRUE | spec2_mprecise == TRUE) & age_equal == TRUE & sex_equal == TRUE & plumage2_mprecise == TRUE)  |#
		((spec_equal == TRUE | spec2_mprecise == TRUE) & age_equal == TRUE & sex_equal == TRUE & plumage_equal == TRUE & loc2!= "W3") #
		){keep<-2 } else { 		keep<-0} #keep both#
} else {	keep<-0} #keep both#
return (keep)#
} # end of function compare.it#
#
for (i in 1:length(count1[counttypeframe1][dc_specsframe1])) {#
	#progress bar#
	duration<-as.numeric((Sys.time()-systemtime),units="secs")#
	currentduration<-currentduration + duration#
	avgrestduration<-if(round(currentduration/i*(length(station1$count)-i)/60,0) > 2){paste(round(currentduration/60,1) , "/", round(currentduration/i*(length(station1$count)-i)/60,1),"min")} else {paste(round(currentduration/i*(length(station1$count)-i),0),"sec left")}#
	systemtime<-Sys.time()#
	#### uncomment this line when running multiple years#
   #	setTkProgressBar(pb, i, title=paste("DoubleCountScript-BRC"), label=paste(y, " Progress: ",round(i/length(station1$count)*100, 0), "% " , avgrestduration, ", detected numbers / records: ", dc_number_total," / ", dc_hits))#
   	### uncomment this line when running a single year#
   	setTkProgressBar(pb, i, title=paste("DoubleCountScript-BRC"), label=paste(" Progress: ",round(i/length(station1$count)*100, 0), "% " , avgrestduration, ", detected numbers / records: ", dc_number_total," / ", dc_hits))#
   		specs1<-NA;	timeframe2<-NA; specframe2<-NA;zoneframe2<-NA;counttypeframe2<-NA#
	###frame subset for station 2#
	speed<-allspecies[allspecies$species == speciesname1[counttypeframe1][dc_specsframe1][i],]$seconds#
	# frames opposite observation by time window#
	timeframe2<-which(datetime2 >= datetime1[counttypeframe1][dc_specsframe1][i] - speed & datetime2 <= datetime1[counttypeframe1][dc_specsframe1][i] + speed)#
	# frames opposite observation by respective species for potential DC#
	specs1<-dc_specs[colnames(dc_specs) == speciesname1[counttypeframe1][dc_specsframe1][i]]#
	if (	sum(speciesname2[timeframe2] %in% specs1[1:nrow(specs1),],na.rm=TRUE) > 0){specframe2<-which(speciesname2[timeframe2] %in% specs1[1:nrow(specs1),])}else{specframe2<-NA} #
	# frames opposite observation by zone != E3 on station 2#
	if (sum(location2[timeframe2][specframe2] != "E3", na.rm=TRUE) > 0){zoneframe2<-which(location2[timeframe2][specframe2] != "E3")}else{zoneframe2<-NA}#
	if (sum(counttype2[timeframe2][specframe2][zoneframe2] != "sc", na.rm=TRUE) > 0){counttypeframe2<-which(counttype2[timeframe2][specframe2][zoneframe2] != "sc")}else{counttypeframe2<-NA}#
	#start loop to compare details with remaining framed data#
	if (sum(!is.na(specframe2), na.rm=TRUE) > 0 & sum(!is.na(zoneframe2), na.rm=TRUE) > 0 & sum(!is.na(counttypeframe2), na.rm=TRUE) > 0 ){#
	for(p in 1:length(datetime2[timeframe2][specframe2][zoneframe2][counttypeframe2])){#
		keep<-0#
		order_frame<-order(as.numeric(datetime1[counttypeframe1][dc_specsframe1][i] - datetime2[timeframe2][specframe2][zoneframe2][counttypeframe2])^2)#
		#compare.it (species1,species2,loc1,loc2,s1,s2,a1,a2,p1,p2,n1,n2)#
		keep<-compare.it (#
		speciesname1[counttypeframe1][dc_specsframe1][i],#
		speciesname2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p],#
		location1[counttypeframe1][dc_specsframe1][i],#
		location2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p],#
		sex1[counttypeframe1][dc_specsframe1][i],#
		sex2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p],#
		age1[counttypeframe1][dc_specsframe1][i],#
		age2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p],#
		plumage1[counttypeframe1][dc_specsframe1][i],#
		plumage2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p],#
		count1[counttypeframe1][dc_specsframe1][i],#
		count2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] )#
		dc_max_reached1 <- count1_o[counttypeframe1][dc_specsframe1][i] < (dckept1[counttypeframe1][dc_specsframe1][i] - dcdel1[counttypeframe1][dc_specsframe1][i])#
		dc_max_reached2 <- count2_o[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] < (dckept2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] - dcdel2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p])#
		if (keep != 0 & !is.na(keep) & dc_max_reached1 == FALSE & dc_max_reached2 == FALSE){#
			dc_max1 <- count1_o[counttypeframe1][dc_specsframe1][i] - (dckept1[counttypeframe1][dc_specsframe1][i] - dcdel1[counttypeframe1][dc_specsframe1][i])#
			dc_max2 <- count2_o[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] - (dckept2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] - dcdel2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p])#
			dc_number <- min(count2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p], count1[counttypeframe1][dc_specsframe1][i], dc_max1, dc_max2) #
			dc_number_total<-dc_number_total + dc_number#
			dc_hits<- dc_hits + 1#
			if(keep == 1 & dc_number > 0){#
			#keep records of station1, store DC number in dcdel#
			dckept1[counttypeframe1][dc_specsframe1][i] <- dckept1[counttypeframe1][dc_specsframe1][i] + dc_number#
			dcdel2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] <- dcdel2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] - dc_number#
			#store ID of opposite observation#
			dcdelremark1[counttypeframe1][dc_specsframe1][i] <- paste0(dcdelremark1[counttypeframe1][dc_specsframe1][i], "ID", id2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p],":", -dc_number," ")#
			dcdelremark2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] <- paste0(dcdelremark2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p],"ID", id1[counttypeframe1][dc_specsframe1][i], ":", dc_number," ")	#
			#change count number of opposite station#
			count2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p]<- count2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] - dc_number#
			} else if (keep == 2 & dc_number > 0){#
			#keep records of station2, store DC number in dcdel#
			dcdel1[counttypeframe1][dc_specsframe1][i] <- dcdel1[counttypeframe1][dc_specsframe1][i] - dc_number#
			dckept2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] <- dckept2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] + dc_number#
			#store ID of opposite observation#
			dcdelremark1[counttypeframe1][dc_specsframe1][i] <- paste0(dcdelremark1[counttypeframe1][dc_specsframe1][i], "ID", id2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p], ":", dc_number," ")#
			dcdelremark2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] <- paste0(dcdelremark2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p],"ID", id1[counttypeframe1][dc_specsframe1][i],":", -dc_number," ")	#
			#change count number of opposite station	#
			count1[counttypeframe1][dc_specsframe1][i]<- count1[counttypeframe1][dc_specsframe1][i] - dc_number#
}else {keep<-3}}}}}#
sum(dcdel1)#
sum(dcdel2)#
sum(count1)#
sum(count2)#
#create table for all#
date1<-as.Date(datetime1)#
date2<-as.Date(datetime2)#
timestamp1<-format(datetime1,"%H:%M:%S")#
timestamp2<-format(datetime2,"%H:%M:%S")#
new_station1<-data.frame(id1, date1, timestamp1, speciesname1, count1, count1_o, countback1, station=1, location1, age1, sex1, plumage1, counttype1, migtype1, remark1, dckept1, dcdel1, dcdelremark1)#
new_station2<-data.frame(id2, date2, timestamp2, speciesname2, count2, count2_o, countback2, station=2, location2, age2, sex2, plumage2, counttype2, migtype2, remark2, dckept2, dcdel2, dcdelremark2)#
header<-c("id", "date", "time", "species", "number_new", "number_ori", "numberN", "station", "location", "age", "sex", "morph", "ctype", "mtype", "remark", "dckept", "dcdel", "dcremark")#
colnames(new_station1)<-header#
colnames(new_station2)<-header#
new_count<-rbind(new_station1, new_station2)#
rownames(new_count)<-new_count$id#
new_count<-new_count[order(new_count$id),]#
#
dcdel_spec_add1<-tapply(dcdel1>0, speciesname1, FUN=sum, na.rm=TRUE)#
dcdel_spec_add2<-tapply(dcdel2>0, speciesname2, FUN=sum, na.rm=TRUE)#
dcdel_spec_sub1<--tapply(dcdel1<0, speciesname1, FUN=sum, na.rm=TRUE)#
dcdel_spec_sub2<--tapply(dcdel2<0, speciesname2, FUN=sum, na.rm=TRUE)#
dc_spec_table<-transpose(data.frame(rbind(add=dcdel_spec_add1, sub=dcdel_spec_sub1)))#
colnames(dc_spec_table)<-c("add","sub")#
dcdel_tab_add<-tapply(new_count$dcdel>0, list(new_count$species, new_count$station), FUN=sum, na.rm=TRUE)#
dcdel_tab_sub<--tapply(new_count$dcdel<0, list(new_count$species, new_count$station), FUN=sum, na.rm=TRUE)#
dcdel_tab_sum<-data.frame(tapply(new_count$number_new, list(new_count$species, new_count$station), FUN=sum, na.rm=TRUE))#
dcdel_tab_sum$species<-rownames(dcdel_tab_sum)#
dcdel_tab_sum<-dcdel_tab_sum[order(dcdel_tab_sum$species),]#
#
original_count_tab_sum<-data.frame(tapply(data$count, list(data$speciesname, data$telpost), FUN=sum, na.rm=TRUE))#
original_count_tab_sum$species<-rownames(original_count_tab_sum)#
original_count_tab_sum<-original_count_tab_sum[order(original_count_tab_sum$species),]#
dcdel_tab<-cbind(dcdel_tab_add, dcdel_tab_sub,dcdel_tab_sum)#
#
dcdel_tab<-data.frame(species=original_count_tab_sum$species, dcdel1=dcdel_tab_sum$X1-original_count_tab_sum$X1, dcdel2=dcdel_tab_sum$X2-original_count_tab_sum$X2)#
dcdel_tab[is.na(dcdel_tab)]<-0#
#
this_year<-unique(year(new_count$date))#
dc_records<-length(which(new_count$ctype == "dc"))#
dc_detected<-length(which(new_count$ctype == "dc" & new_count$dcremark != ""))#
dc_quality<-paste0(this_year,": ", round(100/dc_records*dc_detected,1)," %")#
quality<-paste0(this_year," - detected numbers / records: ",dc_number_total," / ", dc_hits, " ### DC Quality: ",dc_quality, " AND NO ERRORS")#
#
############ data check #####################
new_count<-as.data.table(new_count)#
if(nrow(new_count[new_count$number_o < new_count$dckept - new_count$dcdel,]) > 0){print(paste(this_year," - ERROR ALERT: NUMBER_O > DCKEPT - DCDEL"))} else if(sum(new_count$dckept + new_count$dcdel) > 0){print(paste(this_year," - ERROR ALERT: dckept + dcdel > 0"))} else {print(quality)}#
#############################################
#
setwd(outputdir)#
write.csv(new_count, paste0("1-new_count_DC_",unique(year(new_count$date)),".csv"), fileEncoding ="UTF-8")#
write.csv(dcdel_tab, paste0("1-dcdel_tab_", unique(year(new_count$date)),".csv"), fileEncoding ="UTF-8")#
write.csv(quality, paste0("1-quality_", unique(year(new_count$date)),".txt"), fileEncoding ="UTF-8")#
close(pb)#
library(beepr)#
beep("complete")#
#
}
workdir<-"/Users/jasper 1/Documents/Rplayground/data analysis - Bitbucket/data/in"#
outputdir<-"/Users/jasper 1/Documents/Rplayground/data analysis - Bitbucket/data/in"#
setwd(workdir)#
full_data<-read.csv("2017_Trektellen_RAW.csv", header=T, fileEncoding="UTF-8", sep="\t")
names(full_data)
full_data$station[full_data$station == "1. Sakhalvasho"]<-"1"
unique(full_data$station)
#! trektellen files are written in UTF-7#
full_data<-data.frame(full_data)#
######################## Converter START #########################
colnames(full_data)[colnames(full_data) == "migtype"]<-"health"#
colnames(full_data)[colnames(full_data) == "plumage"]<-"morph"#
colnames(full_data)[colnames(full_data) == "timestamp"]<-"time"#
colnames(full_data)[colnames(full_data) == "telpost"]<-"station"#
colnames(full_data)[colnames(full_data) == "speciesname"]<-"species"#
colnames(full_data)[colnames(full_data) == "soortkey"]<-"species"#
colnames(full_data)[colnames(full_data) == "count"]<-"number"#
colnames(full_data)[colnames(full_data) == "countback"]<-"countsouth" # error!!!#
colnames(full_data)[colnames(full_data) == "counttype"]<-"counttype"#
colnames(full_data)[colnames(full_data) == "speciesid"]<-"speciesid"#
#
full_data$species<-as.character(full_data$species)#
full_data$age<-as.character(full_data$age)#
full_data$morph<-as.character(full_data$morph)#
full_data$health<-as.character(full_data$health)#
full_data$counttype<-as.character(full_data$counttype)#
full_data$sex<-as.character(full_data$sex)
full_data$station[full_data$station == "1. Sakhalvasho"]<-"1"
unique(full_data$station)
full_data<-read.csv("2017_Trektellen_RAW.csv", header=T, fileEncoding="UTF-8", sep="\t")#
#
#! trektellen files are written in UTF-7#
full_data<-data.frame(full_data)#
######################## Converter START #########################
colnames(full_data)[colnames(full_data) == "migtype"]<-"health"#
colnames(full_data)[colnames(full_data) == "plumage"]<-"morph"#
colnames(full_data)[colnames(full_data) == "timestamp"]<-"time"#
colnames(full_data)[colnames(full_data) == "telpost"]<-"station"#
colnames(full_data)[colnames(full_data) == "speciesname"]<-"species"#
colnames(full_data)[colnames(full_data) == "soortkey"]<-"species"#
colnames(full_data)[colnames(full_data) == "count"]<-"number"#
colnames(full_data)[colnames(full_data) == "countback"]<-"countsouth" # error!!!#
colnames(full_data)[colnames(full_data) == "counttype"]<-"counttype"#
colnames(full_data)[colnames(full_data) == "speciesid"]<-"speciesid"#
#
full_data$species<-as.character(full_data$species)#
full_data$age<-as.character(full_data$age)#
full_data$morph<-as.character(full_data$morph)#
full_data$health<-as.character(full_data$health)#
full_data$counttype<-as.character(full_data$counttype)#
full_data$sex<-as.character(full_data$sex)
unique(full_data$station)
full_data$station[full_data$station == "1. Sakhalvasho"]<-1
full_data<-read.csv("2017_Trektellen_RAW.csv", header=T, fileEncoding="UTF-8", sep="\t")#
#
#! trektellen files are written in UTF-7#
full_data<-data.frame(full_data)#
######################## Converter START #########################
colnames(full_data)[colnames(full_data) == "migtype"]<-"health"#
colnames(full_data)[colnames(full_data) == "plumage"]<-"morph"#
colnames(full_data)[colnames(full_data) == "timestamp"]<-"time"#
colnames(full_data)[colnames(full_data) == "telpost"]<-"station"#
colnames(full_data)[colnames(full_data) == "speciesname"]<-"species"#
colnames(full_data)[colnames(full_data) == "soortkey"]<-"species"#
colnames(full_data)[colnames(full_data) == "count"]<-"number"#
colnames(full_data)[colnames(full_data) == "countback"]<-"countsouth" # error!!!#
colnames(full_data)[colnames(full_data) == "counttype"]<-"counttype"#
colnames(full_data)[colnames(full_data) == "speciesid"]<-"speciesid"#
#
full_data$species<-as.character(full_data$species)#
full_data$age<-as.character(full_data$age)#
full_data$morph<-as.character(full_data$morph)#
full_data$health<-as.character(full_data$health)#
full_data$counttype<-as.character(full_data$counttype)#
full_data$sex<-as.character(full_data$sex)
full_data$station[full_data$station == "1. Sakhalvasho"]<-"1"
full_data<-read.csv("2017_Trektellen_RAW.csv", header=T, fileEncoding="UTF-8", sep="\t")#
#
#! trektellen files are written in UTF-7#
full_data<-data.frame(full_data)#
######################## Converter START #########################
colnames(full_data)[colnames(full_data) == "migtype"]<-"health"#
colnames(full_data)[colnames(full_data) == "plumage"]<-"morph"#
colnames(full_data)[colnames(full_data) == "timestamp"]<-"time"#
colnames(full_data)[colnames(full_data) == "telpost"]<-"station"#
colnames(full_data)[colnames(full_data) == "speciesname"]<-"species"#
colnames(full_data)[colnames(full_data) == "soortkey"]<-"species"#
colnames(full_data)[colnames(full_data) == "count"]<-"number"#
colnames(full_data)[colnames(full_data) == "countback"]<-"countsouth" # error!!!#
colnames(full_data)[colnames(full_data) == "counttype"]<-"counttype"#
colnames(full_data)[colnames(full_data) == "speciesid"]<-"speciesid"#
#
full_data$species<-as.character(full_data$species)#
full_data$age<-as.character(full_data$age)#
full_data$morph<-as.character(full_data$morph)#
full_data$health<-as.character(full_data$health)#
full_data$counttype<-as.character(full_data$counttype)#
full_data$sex<-as.character(full_data$sex)
full_data$age[full_data$age == "A"]<-"ad"
full_data$station[full_data$station == "1. Sakhalvasho"]
full_data$station[full_data$station == "1. Sakhalvasho"]<-1
full_data$station
full_data<-read.csv("2017_Trektellen_RAW.csv", header=T, fileEncoding="UTF-8", sep="\t")#
#
#! trektellen files are written in UTF-7#
full_data<-data.frame(full_data)#
######################## Converter START #########################
colnames(full_data)[colnames(full_data) == "migtype"]<-"health"#
colnames(full_data)[colnames(full_data) == "plumage"]<-"morph"#
colnames(full_data)[colnames(full_data) == "timestamp"]<-"time"#
colnames(full_data)[colnames(full_data) == "telpost"]<-"station"#
colnames(full_data)[colnames(full_data) == "speciesname"]<-"species"#
colnames(full_data)[colnames(full_data) == "soortkey"]<-"species"#
colnames(full_data)[colnames(full_data) == "count"]<-"number"#
colnames(full_data)[colnames(full_data) == "countback"]<-"countsouth" # error!!!#
colnames(full_data)[colnames(full_data) == "counttype"]<-"counttype"#
colnames(full_data)[colnames(full_data) == "speciesid"]<-"speciesid"#
#
full_data$species<-as.character(full_data$species)#
full_data$age<-as.character(full_data$age)#
full_data$morph<-as.character(full_data$morph)#
full_data$health<-as.character(full_data$health)#
full_data$counttype<-as.character(full_data$counttype)#
full_data$sex<-as.character(full_data$sex)#
full_data$station<-as.character(full_data$station)
full_data$station[full_data$station == "1. Sakhalvasho"]<-1
full_data$station[full_data$station == "1. Sakhalvasho"]<-1#
full_data$station[full_data$station == "2. Shuamta"]<-2#
full_data$station<-as.numeric(full_data$station)
full_data$station
################### BATUMI RAPTOR COUNT ########################
######### Script sets for compiling count data #################
############ Converter for Trektellen to BRC format ############
################################################################
# before you run that script ########
# replace station names with numbers#
# change date format to YYYY-MM-DD#
# change time format to HH:MM:SS#
### read data ####
#
#### directories #####
# modify the path#
workdir<-"/Users/jasper 1/Documents/Rplayground/data analysis - Bitbucket/data/in"#
outputdir<-"/Users/jasper 1/Documents/Rplayground/data analysis - Bitbucket/data/in"#
setwd(workdir)#
full_data<-read.csv("2017_Trektellen_RAW.csv", header=T, fileEncoding="UTF-8", sep="\t")#
#
#! trektellen files are written in UTF-7#
full_data<-data.frame(full_data)#
######################## Converter START #########################
colnames(full_data)[colnames(full_data) == "migtype"]<-"health"#
colnames(full_data)[colnames(full_data) == "plumage"]<-"morph"#
colnames(full_data)[colnames(full_data) == "timestamp"]<-"time"#
colnames(full_data)[colnames(full_data) == "telpost"]<-"station"#
colnames(full_data)[colnames(full_data) == "speciesname"]<-"species"#
colnames(full_data)[colnames(full_data) == "soortkey"]<-"species"#
colnames(full_data)[colnames(full_data) == "count"]<-"number"#
colnames(full_data)[colnames(full_data) == "countback"]<-"countsouth" # error!!!#
colnames(full_data)[colnames(full_data) == "counttype"]<-"counttype"#
colnames(full_data)[colnames(full_data) == "speciesid"]<-"speciesid"#
#
full_data$species<-as.character(full_data$species)#
full_data$age<-as.character(full_data$age)#
full_data$morph<-as.character(full_data$morph)#
full_data$health<-as.character(full_data$health)#
full_data$counttype<-as.character(full_data$counttype)#
full_data$sex<-as.character(full_data$sex)#
full_data$station<-as.character(full_data$station)#
#
full_data$station[full_data$station == "1. Sakhalvasho"]<-1#
full_data$station[full_data$station == "2. Shuamta"]<-2#
full_data$station<-as.numeric(full_data$station)#
#
#### set abbreviations straight #####
full_data$age[full_data$age == "A"]<-"ad"#
full_data$age[full_data$age == "I"]<-"imm"#
full_data$age[full_data$age == "J"]<-"juv"#
full_data$age[full_data$age == "Non-Juv"]<-"nonjuv"#
full_data$age[full_data$age == "non-juv"]<-"nonjuv"#
full_data$morph[full_data$morph == "D"]<-"dark"#
full_data$morph[full_data$morph == "L"]<-"light"#
full_data$health[full_data$health == "I"]<-"inj"#
full_data$health[full_data$health == "K"]<-"kil"#
full_data$sex[full_data$sex == "FC"]<-"fc"#
full_data$sex[full_data$sex == "M"]<-"m"#
full_data$sex[full_data$sex == "F"]<-"f"#
full_data$counttype[full_data$counttype == "S"]<-"SC"#
full_data$counttype[full_data$counttype == "D"]<-"DC"#
full_data$species[full_data$species == "Accspec"]<-"SparrowH/Goshawk"#
full_data$species[full_data$species == "BK"]<-"BlackKite" #
full_data$species[full_data$species == "BlaKite"]<-"BlackKite"#
full_data$species[full_data$species == "BK_JUV"]<-"BlackKite_JUV"#
full_data$species[full_data$species == "BK_NONJUV"]<-"BlackKite_NONJUV"#
full_data$species[full_data$species == "Bk_juv"]<-"BlackKite_JUV"#
full_data$species[full_data$species == "Bk_imm"]<-"BlackKite_NONJUV"#
full_data$species[full_data$species == "Bk_ad"]<-"BlackKite_NONJUV"#
full_data$species[full_data$species == "BKjuv"]<-"BlackKite_JUV"#
full_data$species[full_data$species == "BKimm"]<-"BlackKite_NONJUV"#
full_data$species[full_data$species == "BKad"]<-"BlackKite_NONJUV"#
full_data$species[full_data$species == "BK_Ad"]<-"BlackKite_NONJUV"#
full_data$species[full_data$species == "BK_Non-juv"]<-"BlackKite_NONJUV"#
full_data$species[full_data$species == "BK_Juv"]<-"BlackKite_JUV"#
full_data$species[full_data$species == "BE"]<-"BootedE"#
full_data$species[full_data$species == "BEL"]<-"BootedEL" #
full_data$species[full_data$species == "BED"]<-"BootedED" #
full_data$species[full_data$species == "Buzspec"]<-"Buzzard"#
full_data$species[full_data$species == "Buzzard sp"]<-"Buzzard"#
full_data$species[full_data$species == "Buz/HonBuz"]<-"Buzzard"#
full_data$species[full_data$species == "Buz"]<-"Buzzard"#
full_data$species[full_data$species == "BUZ"]<-"Buzzard"#
full_data$species[full_data$species == "B"]<-"Buzzard"#
full_data$species[full_data$species == "BlaStork"]<-"BlackStork"#
full_data$species[full_data$species == "BS"]<-"BlackStork"#
full_data$species[full_data$species == "BS/WS"]<-"Stork"#
full_data$species[full_data$species == "BlackVulture"]<-"BlackV" #
full_data$species[full_data$species == "BV"]<-"BlackV"#
full_data$species[full_data$species == "CommonB"]<-"CommonBuz"#
full_data$species[full_data$species == "CB"]<-"CommonBuz" #
full_data$species[full_data$species == "Crane"]<-"CommonCrane" #
full_data$species[full_data$species == "CC"]<-"CommonCrane"#
full_data$species[full_data$species == "CommonC"]<-"CommonCrane"#
full_data$species[full_data$species == "ComCrane"]<-"CommonCrane"#
full_data$species[full_data$species == "CommonK"]<-"CommonKestrel"#
full_data$species[full_data$species == "CommonKes"]<-"CommonKestrel"#
full_data$species[full_data$species == "CK"]<-"CommonKestrel"#
full_data$species[full_data$species == "CLK"]<-"Kestrel-SPEC"#
full_data$species[full_data$species == "Crested HB"]<-"CrestedHB"#
full_data$species[full_data$species == "CHB"]<-"CrestedHB"#
full_data$species[full_data$species == "Demoisellecrane"]<-"DemoiselleCrane"#
full_data$species[full_data$species == "Demoiselle crane"]<-"DemoiselleCrane"#
full_data$species[full_data$species == "DalmatianP"]<-"DalmatianPelican"#
full_data$species[full_data$species == "EgytianV"]<-"EgyptianV"#
full_data$species[full_data$species == "Egy"]<-"EgyptianV"#
full_data$species[full_data$species == "SparrowH"]<-"EurasianSH"#
full_data$species[full_data$species == "ESH"]<-"EurasianSH"#
full_data$species[full_data$species == "ESPH"]<-"EurasianSH"#
full_data$species[full_data$species == "Fal"]<-"Falcon-SPEC"#
full_data$species[full_data$species == "GSE"]<-"GreaterSE"#
full_data$species[full_data$species == "GE"]<-"GoldenE"#
full_data$species[full_data$species == "Gh"]<-"Goshawk"#
full_data$species[full_data$species == "GH"]<-"Goshawk"#
full_data$species[full_data$species == "Griffon"]<-"GriffonV" #
full_data$species[full_data$species == "Griffon V"]<-"GriffonV" #
full_data$species[full_data$species == "GV"]<-"GriffonV" #
full_data$species[full_data$species == "Har"]<-"Harrier-SPEC"#
full_data$species[full_data$species == "harrier sp"]<-"Harrier-SPEC"#
full_data$species[full_data$species == "Harspec"]<-"Harrier-SPEC"#
full_data$species[full_data$species == "Circus-SPEC"]<-"Harrier-SPEC"#
full_data$species[full_data$species == "Hen H"]<-"Hen"#
full_data$species[full_data$species == "HOb"]<-"Hobby"#
full_data$species[full_data$species == "HOB"]<-"Hobby"#
full_data$species[full_data$species == "Hob"]<-"Hobby"#
full_data$species[full_data$species == "Hob/RFF"]<-"Hobby/RedFF"#
full_data$species[full_data$species == "HobRFF"]<-"Hobby/RedFF"#
full_data$species[full_data$species == "HB "]<-"HB"#
full_data$species[full_data$species == "HBjuv"]<-"HB_JUV"#
full_data$species[full_data$species == "HBad"]<-"HB_AD"#
full_data$species[full_data$species == "HB_juv"]<-"HB_JUV"#
full_data$species[full_data$species == "HB_ad"]<-"HB_AD"#
full_data$species[full_data$species == "HB_Juv"]<-"HB_JUV"#
full_data$species[full_data$species == "HB_Ad"]<-"HB_AD"#
full_data$species[full_data$species == "Imp"]<-"ImperialE"#
full_data$species[full_data$species == "ImpE"]<-"ImperialE"#
full_data$species[full_data$species == "Imp E"]<-"ImperialE"#
full_data$species[full_data$species == "LUID"]<-"LargeEAGLE"#
full_data$species[full_data$species == "LAquila-SPEC"]<-"LargeEAGLE"#
full_data$species[full_data$species == "Large EAGLE"]<-"LargeEAGLE"#
full_data$species[full_data$species == "LEspec"]<-"LargeEAGLE"#
full_data$species[full_data$species == "LesGreste"]<-"LargeEAGLE"#
full_data$species[full_data$species == "LesGrSte"]<-"LargeEAGLE"#
full_data$species[full_data$species == "LesGrestep"]<-"LargeEAGLE"#
full_data$species[full_data$species == "LesGresteppe"]<-"LargeEAGLE"#
full_data$species[full_data$species == "Large Eagle"]<-"LargeEAGLE"#
full_data$species[full_data$species == "large FALCON"]<-"LargeFALCON"#
full_data$species[full_data$species == "LargeFalcon"]<-"LargeFALCON"#
full_data$species[full_data$species == "LFspec"]<-"LargeFALCON"#
full_data$species[full_data$species == "Fspec"]<-"LargeFALCON"#
full_data$species[full_data$species == "Lkes"]<-"LesserKestrel"#
full_data$species[full_data$species == "LKes"]<-"LesserKestrel"#
full_data$species[full_data$species == "Kestrel"]<-"CommonKestrel"#
full_data$species[full_data$species == "Kes"]<-"CommonKestrel"#
full_data$species[full_data$species == "Kest/LesKest"]<-"Kestrel-SPEC"#
full_data$species[full_data$species == "Kesspec"]<-"Kestrel-SPEC"#
full_data$species[full_data$species == "LK"]<-"LesserKestrel"#
full_data$species[full_data$species == "LesserKes"]<-"LesserKestrel"#
full_data$species[full_data$species == "LesKes"]<-"LesserKestrel"#
full_data$species[full_data$species == "LSE"]<-"LesserSE"#
full_data$species[full_data$species == "LSH"]<-"LevantSH"#
full_data$species[full_data$species == "LSPH"]<-"LevantSH"#
full_data$species[full_data$species == "LevantS"]<-"LevantSH"#
full_data$species[full_data$species == "LLB"]<-"LongLB"#
full_data$species[full_data$species == "Long-legged buzzard"]<-"LongLB"#
full_data$species[full_data$species == "MAR"]<-"Mar"#
full_data$species[full_data$species == "Mer"]<-"Merlin"#
full_data$species[full_data$species == "MUID"]<-"MediumRaptor"#
full_data$species[full_data$species == "Monpal"]<-"MonPalHen"#
full_data$species[full_data$species == "MonPal"]<-"MonPalHen"#
full_data$species[full_data$species == "MonpalHen"]<-"MonPalHen"#
full_data$species[full_data$species == "OSP"]<-"Osprey"#
full_data$species[full_data$species == "Osp"]<-"Osprey" #
full_data$species[full_data$species == "Per"]<-"Peregrine" #
full_data$species[full_data$species == "Peregrine/Saker"]<-"LargeFALCON"#
full_data$species[full_data$species == "PerSak"]<-"LargeFALCON"#
full_data$species[full_data$species == "PerSakLan"]<-"LargeFALCON"#
full_data$species[full_data$species == "RFF"]<-"RedFF"#
full_data$species[full_data$species == "RK"]<-"RedKite"#
full_data$species[full_data$species == "Rol"]<-"Roller"#
full_data$species[full_data$species == "RLB"]<-"RoughLB"#
full_data$species[full_data$species == "SakerF"]<-"Saker" #
full_data$species[full_data$species == "Sak"]<-"Saker" #
full_data$species[full_data$species == "SB"]<-"StepBuz"#
full_data$species[full_data$species == "SteppeB"]<-"StepBuz"#
full_data$species[full_data$species == "SBHB"]<-"Buzzard"#
full_data$species[full_data$species == "SH"]<-"SparrowH-SPEC"#
full_data$species[full_data$species == "LevantS/Sparrow"]<-"SparrowH-SPEC"#
full_data$species[full_data$species == "Shspec"]<-"SparrowH-SPEC"#
full_data$species[full_data$species == "SPH"]<-"SparrowH-SPEC"#
full_data$species[full_data$species == "SPH/GH"]<-"SparrowH/Goshawk"#
full_data$species[full_data$species == "SPGH"]<-"SparrowH/Goshawk"#
full_data$species[full_data$species == "STE"]<-"ShortTE"#
full_data$species[full_data$species == "SHTE"]<-"ShortTE"#
full_data$species[full_data$species == "Seowl"]<-"ShortEaredOwl" #
full_data$species[full_data$species == "SEowl"]<-"ShortEaredOwl" #
full_data$species[full_data$species == "Short-earedOwl"]<-"ShortEaredOwl"#
full_data$species[full_data$species == "ShortEO"]<-"ShortEaredOwl" #
full_data$species[full_data$species == "SEO"]<-"ShortEaredOwl"#
full_data$species[full_data$species == "STEP"]<-"SteppeE"#
full_data$species[full_data$species == "SUID"]<-"MediumRaptor" # only very little numbers#
full_data$species[full_data$species == "TurtleDove"]<-"TurtleD"#
full_data$species[full_data$species == "UID"]<-"MediumRaptor" # only very little numbers#
full_data$species[full_data$species == "WTE"]<-"WhiteTE" #
full_data$species[full_data$species == "Wh-TailE"]<-"WhiteTE" #
full_data$species[full_data$species == "White-tailedE"]<-"WhiteTE" #
full_data$species[full_data$species == "White-TE"]<-"WhiteTE" #
full_data$species[full_data$species == "Wh-Tail E"]<-"WhiteTE"#
full_data$species[full_data$species == "WhiStork"]<-"WhiteStork"#
full_data$species[full_data$species == "WS"]<-"WhiteStork"#
full_data$species[full_data$species == "WhitStork"]<-"WhiteStork"#
full_data$species[full_data$species == "Storks-SPEC"]<-"Stork-SPEC"#
full_data$species[full_data$species == "WBST"]<-"Stork-SPEC"#
full_data$species[full_data$species == "WP"]<-"WhitePelican"#
full_data$species[full_data$species == "WhiteP"]<-"WhitePelican"#
full_data$species[full_data$species == "Start"]<-"start"#
full_data$species[full_data$species == "Start "]<-"start"#
full_data$species[full_data$species == "START"]<-"start"#
full_data$species[full_data$species == "SHIFT"]<-"shift"#
full_data$species[full_data$species == "Shift"]<-"shift"#
full_data$species[full_data$species == "END"]<-"end"#
full_data$species[full_data$species == "End"]<-"end"#
full_data$species[full_data$species == "shot"]<-"SHOT"#
full_data$species[full_data$species == "Shot"]<-"SHOT"#
full_data$species[full_data$species == "STOP"]<-"end"#
full_data$species[full_data$species == "Stop"]<-"end"#
full_data$species[full_data$species == "Rain"]<-"rain"#
full_data$species[full_data$species == "Comment"]<-"comment"#
full_data$species[full_data$species == "Nis"]<-"NIS"#
full_data$species[full_data$species == "nis"]<-"NIS"#
full_data$species[full_data$species == "Meteo"]<-"meteo"#
full_data$age<-tolower(full_data$age)#
full_data$age[full_data$age == "adult"]<-"ad"#
full_data$age[full_data$age == "Non-Juv"]<-"nonjuv"#
full_data$age[full_data$age == "I"]<-"imm"#
full_data$age[full_data$age == "A"]<-"ad"#
full_data$age[full_data$age == "J"]<-"juv"#
full_data$age[full_data$age == "no value"]<-""#
full_data$age[full_data$age == "m"]<-""#
full_data$age[full_data$age == "fc"]<-""#
full_data$age[full_data$age == "f"]<-""#
full_data$age[full_data$age == "2cy"]<-"imm"#
full_data$age[full_data$age == "2 cy"]<-"imm"#
full_data$age[full_data$age == "3cy"]<-"imm"#
full_data$age[full_data$age == "3 cy"]<-"imm"#
full_data$age[full_data$age == "4cy"]<-"imm"#
full_data$age[full_data$age == "4 cy"]<-"imm"#
full_data$sex<-tolower(full_data$sex)#
full_data$sex[full_data$sex == "no value"]<-""#
full_data$sex[full_data$sex == "novalue"]<-""#
full_data$sex[full_data$sex == "novalue"]<-""#
full_data$sex[full_data$sex == "F"]<-"f"#
full_data$sex[full_data$sex == "FC"]<-"fc"#
full_data$sex[full_data$sex == "M"]<-"m"#
full_data[full_data == "No Value"]<-""#
full_data$number[full_data$number == "No Value"]<-0#
full_data$number[full_data$number == "NoValue"]<-0#
full_data$number[full_data$number == "no value"]<-0#
full_data$number[full_data$number == ""]<-0#
full_data[full_data =="NoValue"]<-""#
full_data<- data.frame(lapply(full_data, function(x) {gsub(";", " ", x)}))#
full_data<- data.frame(lapply(full_data, function(x) {gsub(",", " ", x)}))#
full_data<- data.frame(lapply(full_data, function(x) {gsub("'", "", x)}))#
full_data$countid<-NULL#
######################## Converter END #########################
#
## write data#
setwd(outputdir)#
write.csv(full_data, "converter_output.csv", fileEncoding ="UTF-8")
################################################################
################### BATUMI RAPTOR COUNT ########################
######### Script sets for compiling count data #################
############### Detect double counts ###########################
####### authors: J. Wehrmann, B. Verhelst ######################
#
############################ Instructions #################################
# runs only under BRC formatted data#
# see BRC-oldDataConverter.R for details#
#
# todo's: #
# order tablespecs by taxonomy ID, #
# adjust abbreviations#
# adjust headertitles#
# remove German - change to English#
# add DCDEL IDs to DCDELREMARKS#
# increase speed by removing loops with functions, framing#
rm(list=ls())#
#### libraries  #####
library(lubridate)#
library(rpanel)#
library(tcltk2)#
library(data.table)#
#
### directories ######
# modify the path#
workdir<-"/Users/jasper 1/Documents/Rplayground/data analysis - Bitbucket/data/in"#
outputdir<-"/Users/jasper 1/Documents/Rplayground/data analysis - Bitbucket/data/out"#
setwd(workdir)#
### load data ######
dc_specs<-read.csv("dc_specs.csv", header=TRUE, encoding="UTF-8")#
dc_specs_nonsoaring<-read.csv("dc_specs_nonsoaring.csv", header=TRUE, encoding="UTF-8")#
data<-read.csv("1-converter_output_2017.csv", header=TRUE, encoding="UTF-8")#
#
# Detect HB phase1 in order to not run the double count check as HB phase 1 counts only from station 1. #
HBPhase1Start<-c("2010-08-21 00:00:01 CEST", "2011-08-21 00:00:01 CEST", "2012-08-21 00:00:01 CEST", "2013-08-21 00:00:01 CEST", "2014-08-21 00:00:01 CEST", "2015-08-21 00:00:01 CEST", "2016-08-21 00:00:01 CEST", "2017-08-21 00:00:01 CEST", "2018-08-21 00:00:01 CEST", "2019-08-21 00:00:01 CEST", "2020-08-21 00:00:01 CEST")#
HBPhase1End <-c("2010-09-10 00:00:01 CEST", "2011-09-10 00:00:01 CEST", "2012-09-10 00:00:01 CEST", "2013-09-10 00:00:01 CEST", "2014-09-10 00:00:01 CEST", "2015-09-10 00:00:01 CEST", "2016-09-10 00:00:01 CEST", "2017-09-10 00:00:01 CEST", "2018-09-10 00:00:01 CEST", "2019-09-10 00:00:01 CEST", "2020-09-10 00:00:01 CEST")#
#
#### for running several years uncomment these lines and the line 207 and very last line 349#
for (y in 2008:2016){#
setwd(workdir)	#
# modify the file name, make sure the csv is encoded in UTF-8!!#
data<-read.csv(paste0("1-converter_output_",y,".csv"), header=TRUE, encoding="UTF-8")#
#
# pre-format data#
data$dcdel<-0#
data$dckept <-0#
data$dcdelremark<-""#
data$speciesname<-as.character(data$speciesname)#
data$count<-as.numeric(data$count)#
data$count[which(is.na(data$count) == T)]<-1#
data$count[which(data$count == "")]<-1#
data$datetime<-paste(data$date, data$timestamp, sep = " ")#
data$datetime<-as.POSIXct(data$datetime, format="%Y-%m-%d %H:%M:%S")#
data<-data[order(data$datetime),]#
data$id<-seq.int(nrow(data))#
data[is.na(data)]<-""#
#
# subset for testing#
#data<-data[5000:10000,]#
#subsets#
station1<-as.data.table(subset(data, telpost==1))#
station2<-as.data.table(subset(data, telpost==2))#
#
# create vectors for each col and station#
datetime1<-station1$datetime#
datetime2<-station2$datetime#
count1<-as.numeric(station1$count)#
count2<-as.numeric(station2$count)#
count1_o<-as.numeric(station1$count)#
count2_o<-as.numeric(station2$count)#
countback1<-as.numeric(station1$countback)#
countback2<-as.numeric(station2$countback)#
countback1[is.na(countback1)]<-0#
countback2[is.na(countback2)]<-0#
speciesname1<-station1$speciesname#
speciesname2<-station2$speciesname#
location1<-as.vector(station1$location)#
location2<-as.vector(station2$location)#
age1<-as.vector(station1$age)#
age2<-as.vector(station2$age)#
sex1<-as.vector(station1$sex)#
sex2<-as.vector(station2$sex)#
plumage1<-as.vector(station1$plumage)#
plumage2<-as.vector(station2$plumage)#
counttype1<-as.vector(station1$counttype)#
counttype2<-as.vector(station2$counttype)#
migtype1<-as.vector(station1$migtype)#
migtype2<-as.vector(station2$migtype)#
remark1<-station1$remark#
remark2<-station2$remark#
dcdel1<-as.numeric(station1$dcdel)#
dcdel2<-as.numeric(station2$dcdel)#
dckept1<-as.numeric(station1$dckept)#
dckept2<-as.numeric(station2$dckept)#
dcdelremark1<-as.vector(station1$dcdelremark)#
dcdelremark2<-as.vector(station2$dcdelremark)#
id1<-as.vector(station1$id)#
id2<-as.vector(station2$id)#
count1_length<-length(id1)#
dc_number_total<-0#
dc_hits<-0#
#
# for progress bar to show calculation progress while running the script#
totalnumber<-sum(count1) + sum(count2)#
pb <- tkProgressBar(title = "Progress Bar", min = 0, max = length(station1$count), width = 600)#
systemtime<-Sys.time() #
currentduration<-0#
###frame subset for station 1#
yearframe<-which(unique(station1$year) == year(HBPhase1Start))#
HBphase1frame1<-which(speciesname1 == "HB" & datetime1 > HBPhase1Start[yearframe] & datetime1 < HBPhase1End[yearframe])#
# frame age classes, for station2 redundant because of dc_specs#
HB_BK_age_frame<-! which(speciesname1 == "HB_AD" | speciesname1 == "HB_JUV" | speciesname1 == "BK_AD" | speciesname1 == "BK_NONJUV")#
#frame for HB phase 1 marks records as single count#
counttype1[HBphase1frame1]<-"sc"#
#frame for single counts#
counttypeframe1<-which(counttype1 != "sc")#
#frame for dc_specs#
dc_specsframe1<- which(speciesname1[counttypeframe1] %in% colnames(dc_specs))#
# frames observation by zone != W3 on station 1#
#zoneframe1<-which(location1[counttypeframe1][dc_specsframe1] != "W3")#
#
# set & attach individual species speed#
soaring_speed<-900 # 900 sec are 15 min#
non_soaring_speed<-600 # 600 sec are 10 min#
allspecies<-data.frame(species=unique(data$speciesname), seconds=soaring_speed)#
allspecies[which(allspecies$species %in% dc_specs_nonsoaring[,]),]$seconds<-non_soaring_speed#
#
### function to compare details of entries#
compare.it <- function(species1,species2,loc1,loc2,s1,s2,a1,a2,p1,p2,n1,n2) {#
#for testing#
		# species1<-speciesname1[counttypeframe1][dc_specsframe1][i]#
		# species2<-speciesname2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p]#
		# loc1<-location1[counttypeframe1][dc_specsframe1][i]#
		# loc2<-location2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p]#
		# s1<-sex1[counttypeframe1][dc_specsframe1][i]#
		# s2<-sex2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p]#
		# a1<-age1[counttypeframe1][dc_specsframe1][i]#
		# a2<-age2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p]#
		# p1<-plumage1[counttypeframe1][dc_specsframe1][i]#
		# p2<-plumage2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p]#
		# n1<-count1[counttypeframe1][dc_specsframe1][i]#
		# n2<-count2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] #
    if ((n1 != 0 | n2 != 0) & ( #numbers must not be 0#
	    (loc1 == "E3" & (loc2 == "W2" | loc2 == "W1" | loc2 == "" | (speed == soaring_speed & (loc2 == "O" | loc2 == "E1" | loc2 == "E2")))) |#
    		(loc1 == "E2" & (loc2 == "W2" | loc2 == "W3" | loc2 == "")) | #
    		(loc2 == "W3" & (loc1 == "E2" | loc1 == "E1" | loc1 == "" | (speed == soaring_speed & (loc1 == "O" | loc1 == "W1" | loc1 == "W2"))))#
    		)) {	#zones overlap, continue with comparing other details#
	#_mprecise means more precise, _equal means both are same#
	specs2<-dc_specs[colnames(dc_specs) == species2]#
	if(species1 == species2){ #nlevels(specs1[,]) == nlevels(specs2[,])#
		spec1_mprecise<-FALSE; spec2_mprecise<-FALSE; spec_equal<-TRUE}  else if(nlevels(specs1[,]) < nlevels(specs2[,])){ #species1 > species2#
		spec1_mprecise<-TRUE;  spec2_mprecise<-FALSE; spec_equal<-FALSE} else if(nlevels(specs1[,]) >  nlevels(specs2[,])){#
		spec1_mprecise<-FALSE; spec2_mprecise<-TRUE;  spec_equal<-FALSE}#
 	if(((a1 == "ad" | a1 == "imm") & a2 =="nonjuv") | (a1 !=  ""   & a2 == "")){ #age1 > age2#
    		age1_mprecise<-TRUE;  age2_mprecise<-FALSE; age_equal<-FALSE } else if (((a2 == "ad" | a2 == "imm") & a1 =="nonjuv") | 	(a2 != ""   & a1 == "")){ #age1 < age2#
	   	age1_mprecise<-FALSE; age2_mprecise<-TRUE;  age_equal<-FALSE } else if (a1 == a2){#
    		age1_mprecise<-FALSE; age2_mprecise<-FALSE; age_equal<-TRUE	 } else {#
    		age1_mprecise<-FALSE; age2_mprecise<-FALSE; age_equal<-FALSE }#
#
	if(	(s1 != "" & s2 =="") |  	(s1 == "f"  & s2 == "fc")){ #sex1 > sex2#
    		sex1_mprecise<-TRUE;  sex2_mprecise<-FALSE; sex_equal<-FALSE; sex_different<-FALSE } else if ((s2 != "" & s1 =="") | (s2 == "f"  & s1 == "fc")){ #sex1 < sex2 #
    		sex1_mprecise<-FALSE; sex2_mprecise<-TRUE;  sex_equal<-FALSE; sex_different<-FALSE } else if (s1 == s2){#
    		sex1_mprecise<-FALSE; sex2_mprecise<-FALSE; sex_equal<-TRUE; sex_different<-FALSE  } else if (s1 != s2 & s1!="" & s2 != ""){#
    		sex1_mprecise<-FALSE; sex2_mprecise<-FALSE; sex_equal<-FALSE; sex_different<-TRUE   } else {#
    		sex1_mprecise<-FALSE; sex2_mprecise<-FALSE; sex_equal<-FALSE; sex_different<-FALSE }#
    if( (p1 != "" & p2 =="")){ #plumage1 > plumage2#
    	 	plumage1_mprecise<-TRUE;  plumage2_mprecise<-FALSE; plumage_equal<-FALSE; plumage_different<-FALSE } else if ((p2 != "" & p1 =="")){ #plumage1 < plumage2#
		plumage1_mprecise<-FALSE; plumage2_mprecise<-TRUE;  plumage_equal<-FALSE; plumage_different<-FALSE } else if (p1 == p2){#
    		plumage1_mprecise<-FALSE; plumage2_mprecise<-FALSE; plumage_equal<-TRUE;  plumage_different<-FALSE } else if (p1 != p2 & p1!="" & p2 != ""){#
    	plumage1_mprecise<-FALSE; plumage2_mprecise<-FALSE; plumage_equal<-FALSE; plumage_different<-TRUE  } else {#
 		plumage1_mprecise<-FALSE; plumage2_mprecise<-FALSE; plumage_equal<-FALSE; plumage_different<-FALSE }#
	if (#keep 1#
		((spec_equal == TRUE | spec1_mprecise == TRUE) & (age1_mprecise == TRUE & (sex1_mprecise == TRUE | sex_equal == TRUE)) & (plumage1_mprecise == TRUE | plumage_equal == TRUE))  | #
		((spec_equal == TRUE | spec1_mprecise == TRUE) & age_equal == TRUE & sex1_mprecise == TRUE & (plumage1_mprecise == TRUE | plumage_equal == TRUE))  | #
		((spec_equal == TRUE | spec1_mprecise == TRUE) & age_equal == TRUE & sex_equal == TRUE & plumage1_mprecise == TRUE)  |#
		((spec_equal == TRUE | spec1_mprecise == TRUE) & age_equal == TRUE & sex_equal == TRUE & plumage_equal == TRUE & loc1!= "E3") #
		){keep<-1#
		} else if ( #keep 2#
		((spec_equal == TRUE | spec2_mprecise == TRUE) & (age2_mprecise == TRUE & (sex2_mprecise == TRUE | sex_equal == TRUE)) & (plumage2_mprecise == TRUE | plumage_equal == TRUE))  | #
		((spec_equal == TRUE | spec2_mprecise == TRUE) & age_equal == TRUE & sex2_mprecise == TRUE & (plumage2_mprecise == TRUE | plumage_equal == TRUE))  | #
		((spec_equal == TRUE | spec2_mprecise == TRUE) & age_equal == TRUE & sex_equal == TRUE & plumage2_mprecise == TRUE)  |#
		((spec_equal == TRUE | spec2_mprecise == TRUE) & age_equal == TRUE & sex_equal == TRUE & plumage_equal == TRUE & loc2!= "W3") #
		){keep<-2 } else { 		keep<-0} #keep both#
} else {	keep<-0} #keep both#
return (keep)#
} # end of function compare.it#
#
for (i in 1:length(count1[counttypeframe1][dc_specsframe1])) {#
	#progress bar#
	duration<-as.numeric((Sys.time()-systemtime),units="secs")#
	currentduration<-currentduration + duration#
	avgrestduration<-if(round(currentduration/i*(length(station1$count)-i)/60,0) > 2){paste(round(currentduration/60,1) , "/", round(currentduration/i*(length(station1$count)-i)/60,1),"min")} else {paste(round(currentduration/i*(length(station1$count)-i),0),"sec left")}#
	systemtime<-Sys.time()#
	#### uncomment this line when running multiple years#
   #	setTkProgressBar(pb, i, title=paste("DoubleCountScript-BRC"), label=paste(y, " Progress: ",round(i/length(station1$count)*100, 0), "% " , avgrestduration, ", detected numbers / records: ", dc_number_total," / ", dc_hits))#
   	### uncomment this line when running a single year#
   	setTkProgressBar(pb, i, title=paste("DoubleCountScript-BRC"), label=paste(" Progress: ",round(i/length(station1$count)*100, 0), "% " , avgrestduration, ", detected numbers / records: ", dc_number_total," / ", dc_hits))#
   		specs1<-NA;	timeframe2<-NA; specframe2<-NA;zoneframe2<-NA;counttypeframe2<-NA#
	###frame subset for station 2#
	speed<-allspecies[allspecies$species == speciesname1[counttypeframe1][dc_specsframe1][i],]$seconds#
	# frames opposite observation by time window#
	timeframe2<-which(datetime2 >= datetime1[counttypeframe1][dc_specsframe1][i] - speed & datetime2 <= datetime1[counttypeframe1][dc_specsframe1][i] + speed)#
	# frames opposite observation by respective species for potential DC#
	specs1<-dc_specs[colnames(dc_specs) == speciesname1[counttypeframe1][dc_specsframe1][i]]#
	if (	sum(speciesname2[timeframe2] %in% specs1[1:nrow(specs1),],na.rm=TRUE) > 0){specframe2<-which(speciesname2[timeframe2] %in% specs1[1:nrow(specs1),])}else{specframe2<-NA} #
	# frames opposite observation by zone != E3 on station 2#
	if (sum(location2[timeframe2][specframe2] != "E3", na.rm=TRUE) > 0){zoneframe2<-which(location2[timeframe2][specframe2] != "E3")}else{zoneframe2<-NA}#
	if (sum(counttype2[timeframe2][specframe2][zoneframe2] != "sc", na.rm=TRUE) > 0){counttypeframe2<-which(counttype2[timeframe2][specframe2][zoneframe2] != "sc")}else{counttypeframe2<-NA}#
	#start loop to compare details with remaining framed data#
	if (sum(!is.na(specframe2), na.rm=TRUE) > 0 & sum(!is.na(zoneframe2), na.rm=TRUE) > 0 & sum(!is.na(counttypeframe2), na.rm=TRUE) > 0 ){#
	for(p in 1:length(datetime2[timeframe2][specframe2][zoneframe2][counttypeframe2])){#
		keep<-0#
		order_frame<-order(as.numeric(datetime1[counttypeframe1][dc_specsframe1][i] - datetime2[timeframe2][specframe2][zoneframe2][counttypeframe2])^2)#
		#compare.it (species1,species2,loc1,loc2,s1,s2,a1,a2,p1,p2,n1,n2)#
		keep<-compare.it (#
		speciesname1[counttypeframe1][dc_specsframe1][i],#
		speciesname2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p],#
		location1[counttypeframe1][dc_specsframe1][i],#
		location2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p],#
		sex1[counttypeframe1][dc_specsframe1][i],#
		sex2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p],#
		age1[counttypeframe1][dc_specsframe1][i],#
		age2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p],#
		plumage1[counttypeframe1][dc_specsframe1][i],#
		plumage2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p],#
		count1[counttypeframe1][dc_specsframe1][i],#
		count2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] )#
		dc_max_reached1 <- count1_o[counttypeframe1][dc_specsframe1][i] < (dckept1[counttypeframe1][dc_specsframe1][i] - dcdel1[counttypeframe1][dc_specsframe1][i])#
		dc_max_reached2 <- count2_o[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] < (dckept2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] - dcdel2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p])#
		if (keep != 0 & !is.na(keep) & dc_max_reached1 == FALSE & dc_max_reached2 == FALSE){#
			dc_max1 <- count1_o[counttypeframe1][dc_specsframe1][i] - (dckept1[counttypeframe1][dc_specsframe1][i] - dcdel1[counttypeframe1][dc_specsframe1][i])#
			dc_max2 <- count2_o[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] - (dckept2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] - dcdel2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p])#
			dc_number <- min(count2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p], count1[counttypeframe1][dc_specsframe1][i], dc_max1, dc_max2) #
			dc_number_total<-dc_number_total + dc_number#
			dc_hits<- dc_hits + 1#
			if(keep == 1 & dc_number > 0){#
			#keep records of station1, store DC number in dcdel#
			dckept1[counttypeframe1][dc_specsframe1][i] <- dckept1[counttypeframe1][dc_specsframe1][i] + dc_number#
			dcdel2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] <- dcdel2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] - dc_number#
			#store ID of opposite observation#
			dcdelremark1[counttypeframe1][dc_specsframe1][i] <- paste0(dcdelremark1[counttypeframe1][dc_specsframe1][i], "ID", id2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p],":", -dc_number," ")#
			dcdelremark2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] <- paste0(dcdelremark2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p],"ID", id1[counttypeframe1][dc_specsframe1][i], ":", dc_number," ")	#
			#change count number of opposite station#
			count2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p]<- count2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] - dc_number#
			} else if (keep == 2 & dc_number > 0){#
			#keep records of station2, store DC number in dcdel#
			dcdel1[counttypeframe1][dc_specsframe1][i] <- dcdel1[counttypeframe1][dc_specsframe1][i] - dc_number#
			dckept2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] <- dckept2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] + dc_number#
			#store ID of opposite observation#
			dcdelremark1[counttypeframe1][dc_specsframe1][i] <- paste0(dcdelremark1[counttypeframe1][dc_specsframe1][i], "ID", id2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p], ":", dc_number," ")#
			dcdelremark2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p] <- paste0(dcdelremark2[timeframe2][specframe2][zoneframe2][counttypeframe2][order_frame][p],"ID", id1[counttypeframe1][dc_specsframe1][i],":", -dc_number," ")	#
			#change count number of opposite station	#
			count1[counttypeframe1][dc_specsframe1][i]<- count1[counttypeframe1][dc_specsframe1][i] - dc_number#
}else {keep<-3}}}}}#
sum(dcdel1)#
sum(dcdel2)#
sum(count1)#
sum(count2)#
#create table for all#
date1<-as.Date(datetime1)#
date2<-as.Date(datetime2)#
timestamp1<-format(datetime1,"%H:%M:%S")#
timestamp2<-format(datetime2,"%H:%M:%S")#
new_station1<-data.frame(id1, date1, timestamp1, speciesname1, count1, count1_o, countback1, station=1, location1, age1, sex1, plumage1, counttype1, migtype1, remark1, dckept1, dcdel1, dcdelremark1)#
new_station2<-data.frame(id2, date2, timestamp2, speciesname2, count2, count2_o, countback2, station=2, location2, age2, sex2, plumage2, counttype2, migtype2, remark2, dckept2, dcdel2, dcdelremark2)#
header<-c("id", "date", "time", "species", "number_new", "number_ori", "numberN", "station", "location", "age", "sex", "morph", "ctype", "mtype", "remark", "dckept", "dcdel", "dcremark")#
colnames(new_station1)<-header#
colnames(new_station2)<-header#
new_count<-rbind(new_station1, new_station2)#
rownames(new_count)<-new_count$id#
new_count<-new_count[order(new_count$id),]#
#
dcdel_spec_add1<-tapply(dcdel1>0, speciesname1, FUN=sum, na.rm=TRUE)#
dcdel_spec_add2<-tapply(dcdel2>0, speciesname2, FUN=sum, na.rm=TRUE)#
dcdel_spec_sub1<--tapply(dcdel1<0, speciesname1, FUN=sum, na.rm=TRUE)#
dcdel_spec_sub2<--tapply(dcdel2<0, speciesname2, FUN=sum, na.rm=TRUE)#
dc_spec_table<-transpose(data.frame(rbind(add=dcdel_spec_add1, sub=dcdel_spec_sub1)))#
colnames(dc_spec_table)<-c("add","sub")#
dcdel_tab_add<-tapply(new_count$dcdel>0, list(new_count$species, new_count$station), FUN=sum, na.rm=TRUE)#
dcdel_tab_sub<--tapply(new_count$dcdel<0, list(new_count$species, new_count$station), FUN=sum, na.rm=TRUE)#
dcdel_tab_sum<-data.frame(tapply(new_count$number_new, list(new_count$species, new_count$station), FUN=sum, na.rm=TRUE))#
dcdel_tab_sum$species<-rownames(dcdel_tab_sum)#
dcdel_tab_sum<-dcdel_tab_sum[order(dcdel_tab_sum$species),]#
#
original_count_tab_sum<-data.frame(tapply(data$count, list(data$speciesname, data$telpost), FUN=sum, na.rm=TRUE))#
original_count_tab_sum$species<-rownames(original_count_tab_sum)#
original_count_tab_sum<-original_count_tab_sum[order(original_count_tab_sum$species),]#
dcdel_tab<-cbind(dcdel_tab_add, dcdel_tab_sub,dcdel_tab_sum)#
#
dcdel_tab<-data.frame(species=original_count_tab_sum$species, dcdel1=dcdel_tab_sum$X1-original_count_tab_sum$X1, dcdel2=dcdel_tab_sum$X2-original_count_tab_sum$X2)#
dcdel_tab[is.na(dcdel_tab)]<-0#
#
this_year<-unique(year(new_count$date))#
dc_records<-length(which(new_count$ctype == "dc"))#
dc_detected<-length(which(new_count$ctype == "dc" & new_count$dcremark != ""))#
dc_quality<-paste0(this_year,": ", round(100/dc_records*dc_detected,1)," %")#
quality<-paste0(this_year," - detected numbers / records: ",dc_number_total," / ", dc_hits, " ### DC Quality: ",dc_quality, " AND NO ERRORS")#
#
############ data check #####################
new_count<-as.data.table(new_count)#
if(nrow(new_count[new_count$number_o < new_count$dckept - new_count$dcdel,]) > 0){print(paste(this_year," - ERROR ALERT: NUMBER_O > DCKEPT - DCDEL"))} else if(sum(new_count$dckept + new_count$dcdel) > 0){print(paste(this_year," - ERROR ALERT: dckept + dcdel > 0"))} else {print(quality)}#
#############################################
#
setwd(outputdir)#
write.csv(new_count, paste0("1-new_count_DC_",unique(year(new_count$date)),".csv"), fileEncoding ="UTF-8")#
write.csv(dcdel_tab, paste0("1-dcdel_tab_", unique(year(new_count$date)),".csv"), fileEncoding ="UTF-8")#
write.csv(quality, paste0("1-quality_", unique(year(new_count$date)),".txt"), fileEncoding ="UTF-8")#
close(pb)#
library(beepr)#
beep("complete")#
#
}
